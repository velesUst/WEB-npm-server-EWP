
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchLogin } from './loginAPI';
import { User } from '../interfaces/user';

export interface LoginState {
  token: string;
  status: 'undef' | 'auth' | 'loading' | 'failed';
  authError: string;
}

const initialState: LoginState = {
  token: undefined,
  status: 'undef',
  authError: undefined
};

export const getAuthStatus = (state: RootState) => state.longin.status;
export const getToken = (state: RootState) => state.longin.token;
export const getAuthError = (state: RootState) => state.longin.authError;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchLoginAsync = createAsyncThunk(
  'login/fetchLogin',
  async (user: User) => {
    const response = await fetchLogin(user);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchLoginAsync.pending, (state) => {
        state.status = 'loading';
        state.authError = undefined;
      })
      .addCase(fetchLoginAsync.fulfilled, (state, action) => {
        var obj = JSON.parse(action.payload);
        
        state.status = 'auth';
        state.token = obj.access_token;
        state.authError = undefined;
      })
      .addCase(fetchLoginAsync.rejected, (state, action) => {
        state.status = 'failed';        
        state.authError = action.error.message;
      });
  },
});

export default loginSlice.reducer;
